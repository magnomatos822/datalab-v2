services:
  # --- Camada de Armazenamento e Catálogo ---
  postgres:
    image: postgres:17-alpine
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: main_db # Banco de dados padrão
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    ports:
      - "5433:5432"
    networks:
      - lakehouse-net
    healthcheck:
      # FIX: Explicitly specify the database to check
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d main_db" ]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:RELEASE.2025-06-13T11-33-47Z-cpuv1
    container_name: minio_storage
    restart: always
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000" # API
      - "9001:9001" # Console
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - lakehouse-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  create-minio-buckets:
    image: minio/mc:RELEASE.2024-07-31T15-58-33Z
    container_name: minio_bucket_setup
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - ./minio/create-buckets.sh:/create-buckets.sh:ro
    entrypoint: /bin/sh
    command: /create-buckets.sh
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - lakehouse-net

  nessie:
    # BEST PRACTICE: Versão da imagem alinhada com a extensão do Spark
    image: projectnessie/nessie:0.76.6-java
    container_name: nessie_catalog
    restart: always
    ports:
      - "19120:19120"
    environment:
      # FIX: Use the internal port 5432 for container-to-container communication
      NESSIE_DATABASE_URL: jdbc:postgresql://postgres:5432/nessie
      NESSIE_DATABASE_USERNAME: ${POSTGRES_USER}
      NESSIE_DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - lakehouse-net


  # --- Camada de Processamento ---
  spark-master:
    image: bitnami/spark:3.5
    container_name: spark_master
    restart: always
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      # Passa as credenciais do MinIO para o Spark
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    ports:
      - "8082:8080"
      - "7077:7077"
    volumes:
      - ./spark/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - ./dbt_project:/opt/bitnami/spark/dbt_project # Monta o projeto dbt
    networks:
      - lakehouse-net

  spark-worker:
    image: bitnami/spark:3.5
    # O container_name é omitido para permitir a escalabilidade
    restart: always
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      # Passa as credenciais do MinIO para o Spark
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      # Configuração de recursos do Worker (customizável via .env)
      - SPARK_WORKER_CORES=${SPARK_WORKER_CORES:-1}
      - SPARK_WORKER_MEMORY=${SPARK_WORKER_MEMORY:-2G}
    volumes:
      - ./spark/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - ./dbt_project:/opt/bitnami/spark/dbt_project
    depends_on:
      - spark-master
    networks:
      - lakehouse-net

  # --- Camada de Ingestão  ---


  # --- Camada de Orquestração ---
  prefect-server:
    # BEST PRACTICE: Versão da imagem fixada
    image: prefecthq/prefect:2.14.21-python3.11
    container_name: prefect_server
    restart: always
    environment:
      - PREFECT_UI_API_URL=http://prefect-server:4200/api
      # FIX: Use the internal port 5432
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/prefect_server
    command: prefect server start --host 0.0.0.0
    ports:
      - "4200:4200"
    networks:
      - lakehouse-net
    depends_on:
      postgres:
        condition: service_healthy


  prefect-agent:
    # BEST PRACTICE: Versão da imagem fixada
    image: prefecthq/prefect:2.14.21-python3.11
    container_name: prefect_agent
    restart: always
    environment:
      # FIX: Use the service name for container-to-container communication
      - PREFECT_API_URL=http://prefect-server:4200/api
    command: prefect agent start -q 'default'
    networks:
      - lakehouse-net
    depends_on:
      - prefect-server

  # --- Camada de MLOps ---
  mlflow-server:
    build: ./mlflow # Build the custom image
    container_name: mlflow_server
    restart: always
    # The command is now much cleaner
    command: >
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/mlflow_db
      --default-artifact-root s3://mlflow/
      --host 0.0.0.0
    ports:
      - "5000:5000"
    environment:
      # FIX: Use the MinIO credentials defined in your .env file
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    networks:
      - lakehouse-net
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy

# --- Redes e Volumes ---
networks:
  lakehouse-net:
    driver: bridge

volumes:
  postgres_data:
  minio_data:
  hop_projects:
  hop_metadata:
  hop_audit:
  hop_config: