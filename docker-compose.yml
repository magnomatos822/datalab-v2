x-airbyte-db-env: &airbyte-db-env
  DATABASE_URL: jdbc:postgresql://${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-airbyte}
  DATABASE_USER: ${POSTGRES_USER}
  DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
  DATABASE_HOST: postgres
  DATABASE_PORT: 5432
  DATABASE_DB: airbyte

services:
  # --- Camada de Armazenamento e Catálogo ---
  postgres:
    image: postgres:17-alpine
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: main_db # Banco de dados padrão
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    ports:
      - "5433:5432"
    networks:
      - lakehouse-net
    healthcheck:
      # FIX: Explicitly specify the database to check
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d main_db" ]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:RELEASE.2025-06-13T11-33-47Z-cpuv1
    container_name: minio_storage
    restart: always
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000" # API
      - "9001:9001" # Console
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - lakehouse-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

    # In your docker-compose.yml

  # create-minio-bucket:
  

  nessie:
    # BEST PRACTICE: Versão da imagem alinhada com a extensão do Spark
    image: projectnessie/nessie:0.76.6-java
    container_name: nessie_catalog
    restart: always
    ports:
      - "19120:19120"
    environment:
      # FIX: Use the internal port 5432 for container-to-container communication
      NESSIE_DATABASE_URL: jdbc:postgresql://postgres:5432/nessie
      NESSIE_DATABASE_USERNAME: ${POSTGRES_USER}
      NESSIE_DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - lakehouse-net


  # --- Camada de Processamento ---
  spark-master:
    image: bitnami/spark:3.5
    container_name: spark_master
    restart: always
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      # Passa as credenciais do MinIO para o Spark
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - ./spark/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - ./dbt_project:/opt/bitnami/spark/dbt_project # Monta o projeto dbt
    networks:
      - lakehouse-net

  spark-worker:
    image: bitnami/spark:3.5
    restart: always
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      # Passa as credenciais do MinIO para o Spark
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - ./spark/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - ./dbt_project:/opt/bitnami/spark/dbt_project
    depends_on:
      - spark-master
    networks:
      - lakehouse-net

  # --- Camada de Ingestão (REVISED AND IMPROVED) ---
  airbyte-bootloader:
    image: airbyte/bootloader:dev-7b69422f70
    container_name: airbyte_bootloader
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Usa a âncora YAML para evitar repetição
      AIRBYTE_VERSION: 0.50.43
      <<: *airbyte-db-env
    networks:
      - lakehouse-net

  airbyte-server:
    image: airbyte/server:0.50.43
    container_name: airbyte_server
    restart: always
    ports:
      - "8001:8001"
    # FIX: O servidor também precisa de acesso ao volume do workspace.
    volumes:
      - airbyte_workspace:/tmp/workspace
    environment:
      # Usa a âncora YAML para evitar repetição
      AIRBYTE_VERSION: 0.50.43
      WEBAPP_URL: http://localhost:8000/
      <<: *airbyte-db-env
      CONFIG_DATABASE_USER: ${POSTGRES_USER}
      CONFIG_DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      CONFIG_DATABASE_URL: jdbc:postgresql://postgres:5432/airbyte # Corrected Port
      JOBS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION: 0.29.15.001
      WORKER_HOST: airbyte-worker
      # FIX: O servidor precisa saber onde está o workspace para gerenciar os jobs.
      AIRBYTE_WORKSPACE_ROOT: ${AIRBYTE_WORKSPACE_ROOT}
    depends_on:
      airbyte-bootloader:
        condition: service_completed_successfully
    networks:
      - lakehouse-net

  airbyte-webapp:
    image: airbyte/webapp:0.50.43
    container_name: airbyte_webapp
    restart: always
    ports:
      - "8000:80"
    depends_on:
      - airbyte-server
    networks:
      - lakehouse-net

  airbyte-worker:
    image: airbyte/worker:0.50.43
    container_name: airbyte_worker
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - airbyte_workspace:/tmp/workspace
    environment:
      - AIRBYTE_VERSION=0.50.43
      - AIRBYTE_ROLE=dev
      - AIRBYTE_WORKSPACE_ROOT=${AIRBYTE_WORKSPACE_ROOT}
      - S3_LOG_BUCKET=airbyte
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - S3_ENDPOINT=http://minio:9000
      - S3_PATH_STYLE_ACCESS=true
    depends_on:
      minio:
        condition: service_healthy
      airbyte-bootloader:
        condition: service_completed_successfully
    networks:
      - lakehouse-net

  # --- Camada de Orquestração ---
  prefect-server:
    # BEST PRACTICE: Versão da imagem fixada
    image: prefecthq/prefect:2.14.21-python3.11
    container_name: prefect_server
    restart: always
    environment:
      - PREFECT_UI_API_URL=http://prefect-server:4200/api
      # FIX: Use the internal port 5432
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/prefect_server
    command: prefect server start --host 0.0.0.0
    ports:
      - "4200:4200"
    networks:
      - lakehouse-net
    depends_on:
      postgres:
        condition: service_healthy


  prefect-agent:
    # BEST PRACTICE: Versão da imagem fixada
    image: prefecthq/prefect:2.14.21-python3.11
    container_name: prefect_agent
    restart: always
    environment:
      # FIX: Use the service name for container-to-container communication
      - PREFECT_API_URL=http://prefect-server:4200/api
    command: prefect agent start -q 'default'
    networks:
      - lakehouse-net
    depends_on:
      - prefect-server

  # --- Camada de MLOps ---
  mlflow-server:
    build: ./mlflow # Build the custom image
    container_name: mlflow_server
    restart: always
    # The command is now much cleaner
    command: >
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/mlflow_db
      --default-artifact-root s3://mlflow/
      --host 0.0.0.0
    ports:
      - "5000:5000"
    environment:
      # FIX: Use the MinIO credentials defined in your .env file
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    networks:
      - lakehouse-net
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy

# --- Redes e Volumes ---
networks:
  lakehouse-net:
    driver: bridge

volumes:
  postgres_data:
  minio_data:
  airbyte_workspace: